/**
 * TypeScript types generated from Swagger/OpenAPI definitions
 * Generated by: generate-types-from-swagger.js
 * Sources: data/swagger.json, data/swagger-auth.json
 */

export interface BaseResponse {
  total_results?: number;
  page?: number;
  per_page?: number;
}

export interface Color {
  id?: number;
  value?: string;
}

export interface CorePlace {
  id?: number;
  name?: string;
  display_name?: string;
}

export interface CoreTaxon {
  id?: number;
  iconic_taxon_id?: number;
  iconic_taxon_name?: string;
  is_active?: boolean;
  name?: string;
  preferred_common_name?: string;
  rank?: string;
  rank_level?: number;
}

export interface DateDetails {
  date?: string;
  day?: number;
  hour?: number;
  month?: number;
  week?: number;
  year?: number;
}

export interface Error {
  code?: number;
  message?: string;
}

export interface FieldValue {
  name?: string;
  value?: string;
}

export interface OAuthError {
  error?: 'invalid_request' | 'invalid_client' | 'invalid_grant' | 'unauthorized_client' | 'unsupported_grant_type' | 'invalid_scope';
  error_description?: string;
}

export interface Photo {
  id?: number;
  attribution?: string;
  license_code?: string;
  url?: string;
}

export interface PointGeoJson {
  type?: string;
  coordinates?: number[];
}

export interface PolygonGeoJson {
  type?: string;
  coordinates?: any[];
}

export interface PostAnnotation {
  annotation?: {
  resource_type?: 'Observation';
  resource_id?: number;
  controlled_attribute_id?: number;
  controlled_value_id?: number;
  };
}

export interface PostComment {
  comment?: {
  parent_type?: 'Observation' | 'ListedTaxon' | 'AssessmentSection' | 'ObservationField' | 'Post' | 'TaxonChange';
  parent_id?: number;
  body?: string;
  };
}

export interface PostFlag {
  flag?: {
  flaggable_type?: 'Comment' | 'Identification' | 'Message' | 'Observation' | 'Post' | 'Taxon';
  flaggable_id?: number;
  flag?: 'spam' | 'inappropriate' | 'other';
  };
  flag_explanation?: string;
}

export interface PostIdentification {
  identification?: {
  observation_id?: number;
  taxon_id?: number;
  current?: boolean;
  body?: string;
  };
}

export interface PostMessage {
  message?: {
  to_user_id?: number;
  thread_id?: number;
  subject?: string;
  body?: string;
  };
}

export interface PostObservation {
  observation?: {
  species_guess?: string;
  taxon_id?: number;
  description?: string;
  };
}

export interface PostObservationFieldValue {
  observation_field_value?: {
  observation_id?: number;
  observation_field_id?: number;
  value?: string;
  };
}

export interface PostObservationPhoto {
  observation_photo?: {
  observation_id?: number;
  };
}

export interface PostObservationVote {
  vote?: 'up' | 'down';
  scope?: 'needs_id';
}

export interface PostPost {
  commit?: string;
  post?: {
  title?: string;
  body?: string;
  preferred_formatting?: string;
  user_id?: number;
  parent_id?: number;
  parent_type?: string;
  };
}

export interface PostProjectAdd {
  observation_id?: number;
}

export interface PostProjectObservation {
  project_id?: number;
  observation_id?: number;
}

export interface PostQuality {
  agree?: boolean;
}

export interface PostUser {
  user?: {
  login?: string;
  email?: string;
  name?: string;
  locale?: string;
  time_zone?: string;
  place_id?: number;
  description?: string;
  icon?: Record<string, any>;
  };
  icon_delete?: boolean;
}

export interface PostUserUpdateSession {
  preferred_taxon_page_ancestors_shown?: boolean;
  preferred_taxon_page_place_id?: number;
  preferred_taxon_page_tab?: string;
  prefers_skip_coarer_id_modal?: boolean;
  prefers_hide_obs_show_annotations?: boolean;
  prefers_hide_obs_show_projects?: boolean;
  prefers_hide_obs_show_tags?: boolean;
  prefers_hide_obs_show_observation_fields?: boolean;
  prefers_hide_obs_show_identifiers?: boolean;
  prefers_hide_obs_show_copyright?: boolean;
  prefers_hide_obs_show_quality_metrics?: boolean;
}

export interface PostVote {
  vote?: 'up' | 'down';
}

export interface Project {
  id?: number;
  title?: string;
  description?: string;
  slug?: string;
}

export interface PutFlag {
  flag?: {
  resolved?: boolean;
  };
}

export interface RawConservationStatus {
  source_id?: number;
  authority?: string;
  status?: string;
  status_name?: string;
  iucn?: number;
  geoprivacy?: string;
}

export interface Sound {
  id?: number;
  attribution?: string;
  license_code?: string;
}

export interface TokenResponse {
  access_token?: string;
  token_type?: string;
  expires_in?: number;
  refresh_token?: string;
  scope?: string;
}

export interface UpdateProjectObservation {
  project_observation?: {
  project_id?: number;
  observation_id?: number;
  prefers_curator_coordinate_access?: boolean;
  };
}

export interface User {
  id?: number;
  icon_content_type?: string;
  icon_file_name?: string;
  icon?: string;
  icon_url?: string;
  login?: string;
  name?: string;
}

export type UTFGridResponse = any;

export interface AutocompleteTaxon extends CoreTaxon {
  default_photo?: TaxonPhoto;
  matched_term?: string;
  observations_count?: number;
}

export interface Comment {
  id?: number;
  created_at?: string;
  created_at_details?: DateDetails;
  user?: User;
}

export interface ConservationStatus {
  place_id?: number;
  place?: CorePlace;
  status?: string;
}

export interface EstablishmentMeans {
  establishment_means?: string;
  place?: CorePlace;
}

export interface Fave {
  id?: number;
  votable_id?: number;
  created_at?: string;
  user?: User;
}

export interface Identification {
  id?: number;
  observation_id?: number;
  body?: string;
  created_at?: string;
  updated_at?: string;
  current?: boolean;
  taxon?: ObservationTaxon;
}

export type IdentificationsResponse = BaseResponse;

export interface Message {
  id?: number;
  subject?: string;
  body?: string;
  user_id?: number;
  to_user?: User;
  from_user?: User;
  thread_id?: number;
  thread_messages_count?: number;
  thread_flags?: Record<string, any>[];
}

export type MessagesResponse = BaseResponse;

export type NearbyPlacesResponse = BaseResponse;

export interface NonOwnerIdentification {
  id?: number;
  body?: string;
  created_at?: string;
  created_at_details?: DateDetails;
  user?: User;
}

export interface Observation {
  id?: number;
  cached_votes_total?: number;
  captive?: boolean;
  comments?: Comment[];
  comments_count?: number;
  created_at?: string;
  created_at_details?: DateDetails;
  created_time_zone?: string;
  description?: string;
  faves_count?: number;
  geojson?: PointGeoJson;
  geoprivacy?: string;
  taxon_geoprivacy?: string;
  id_please?: boolean;
  identifications_count?: number;
  identifications_most_agree?: boolean;
  identifications_most_disagree?: boolean;
  identifications_some_agree?: boolean;
  license_code?: string;
  location?: string;
  mappable?: boolean;
  non_owner_ids?: NonOwnerIdentification[];
  num_identification_agreements?: number;
  num_identification_disagreements?: number;
  obscured?: boolean;
  observed_on?: string;
  observed_on_details?: DateDetails;
  observed_on_string?: string;
  observed_time_zone?: string;
  ofvs?: FieldValue[];
  out_of_range?: boolean;
  photos?: Photo[];
  place_guess?: string;
  place_ids?: number[];
  project_ids?: number[];
  project_ids_with_curator_id?: number[];
  project_ids_without_curator_id?: number[];
  quality_grade?: string;
  reviewed_by?: number[];
  site_id?: number;
  sounds?: Sound[];
  species_guess?: string;
  tags?: string[];
  taxon?: ObservationTaxon;
  time_observed_at?: string;
  time_zone_offset?: string;
  updated_at?: string;
  uri?: string;
  user?: User;
  verifiable?: boolean;
}

export type ObservationsObserversResponse = BaseResponse;

export type ObservationsResponse = BaseResponse;

export type ObservationsShowResponse = BaseResponse;

export interface ObservationTaxon extends CoreTaxon {
  ancestor_ids?: number[];
  ancestry?: string;
  conservation_status?: RawConservationStatus;
  endemic?: boolean;
  establishment_means?: EstablishmentMeans;
  introduced?: boolean;
  native?: boolean;
  threatened?: boolean;
}

export type PlacesResponse = BaseResponse;

export interface ProjectMember {
  id?: number;
  project_id?: number;
  created_at?: string;
  updated_at?: string;
  role?: 'curator' | 'manager';
  observations_count?: number;
  taxa_count?: number;
  user?: User;
}

export type ProjectMembersResponse = BaseResponse;

export type ProjectsResponse = BaseResponse;

export interface ShowObservation extends Observation {
  identifications?: Identification[];
  faves?: Fave[];
}

export interface ShowPlace extends CorePlace {
  admin_level?: number;
  ancestor_place_ids?: number[];
  bbox_area?: number;
  geometry_geojson?: PolygonGeoJson;
  location?: string;
  name?: string;
  place_type?: number;
}

export interface ShowTaxon extends CoreTaxon {
  ancestor_ids?: number[];
  colors?: Color[];
  conservation_status?: ConservationStatus;
  conservation_statuses?: TaxonConservationStatus[];
  default_photo?: TaxonPhoto;
  establishment_means?: EstablishmentMeans;
  observations_count?: number;
  preferred_establishment_means?: string;
}

export type SpeciesCountsResponse = BaseResponse;

export type TaxaAutocompleteResponse = BaseResponse;

export type TaxaShowResponse = BaseResponse;

export interface TaxonConservationStatus extends RawConservationStatus {
  place?: CorePlace;
}

export interface TaxonPhoto extends Photo {
  medium_url?: string;
  square_url?: string;
}

export type UserCountsResponse = BaseResponse;

